\ pointer to cross-compiled vocabulary
create xcurrent 0 w,

{: xcons ( a -- a )
$ swap }~ w,

{: xlast ( -- a )
xcurrent }~ w@

{: xtraverse& ( a -( fail pend )- a )
w@ 0<>
offset @ +
' xtraverse& &	\ TODO find out why 'self does not work
dup
2 +
}

{: xsearch ( a -( pad fail )- a )
xtraverse& pad s= cut }~ nip

{: xfind ( -( pad fail )- a )
xcurrent xsearch }~ skipstr

\ target tick
{: x'
word xfind 2 + offset @ }~ -

\ target create
{: xcreate
xlast
xcons
xcurrent w!
word
pad
s,
}

\ target pointer to 8-bit literal
0 variable lit8

\ target pointer to 16-bit literal
0 variable lit16

\ target pointer to 8-bit string literal
0 variable lits

{: xliteral ( x -( heap )- )
{ FF <= lit8 @ w, }~ c, { lit16 @ w, }~ w, }~|

{: x{{ ( -( heap )- a )
lits @ w, 0 c, }~ here

{: x}} ( a -( heap )- )
dup here swap - swap 1- }~ c,

\ target pointer to comma
0 variable comma

\ target pointer to endcomp
0 variable endcomp

\ target pointer to endtail
0 variable endtail

\ target pointer to quotate
0 variable quotate

\ target 'endcomp
{: 'endcomp ( -- a )
endcomp @ }

\ target 'endtail
{: 'endtail ( -- a )
endtail @ }

\ target 'quotate
{: 'quotate ( -- a )
quotate @ }

\ create association
{: assoc ( key value table -( heap )- )
dup @ cons swap !
swap , , }

\ recall asocciation
{: recall ( key table -- value )
traverse& third over @ execute = cut drop drop nip cell+ cell+ @ }

\ target host associations
0 variable xcomps

{ comma @ }	' w,				xcomps assoc
{ 'endcomp }	{ w, }~fail			xcomps assoc
{ 'endtail }	{ w, word xfind
		offset @ - 2 + w, }~fail	xcomps assoc

\ while loop
{: while
>r
dup >r
{ r> drop r> drop }~ } |
r> r> swap
>r dup >r
execute
r> r> swap
}~self

\ cross-compiler
{: xcompile
word
{ pad c@ 0= drop }
{ input word }
while
{ xfind dup 2 + swap w@ xcomps recall }
{ pad s>number ' xliteral }
|
execute
}~self

\ cross-quotate
{: xquotate
x{{
{ pad " {" s= xcompile }
'id| \ TODO: string literals
x}}
}

{ 'quotate }	{ drop quotate }		xcomps assoc

\ restart addresses
 0 constant start_rst
 8 constant vm_rst
10 constant dat_rst
18 constant ex_rst
20 constant pop_rst
28 constant push_rst

\ system variables
2000 constant DP
2002 constant TIB
2004 constant FAIL
2006 constant ERR_SP
2008 constant CONTEXT
200A constant CURRENT
200C constant DICTIONARY
200E constant BASE
2010 constant PAD
  20 constant PAD_LEN

\ memory layout
C000 constant STK_BOT
0000 constant STK_TOP

\ labels
7 constant start
6 constant catch
5 constant fail
4 constant vm_l

\ macros
{: vm		vm_rst rst }
{: dat		dat_rst rst }
{: tobc		pop_rst rst }
{: frombc	push_rst rst }
{: next		ix, jp_(hl) }

\ native word definition
{: native
xcreate
comma @ w, }

\ postpone colon definition

{: postpone
native
0 jp }

\ constant definition
{: constant
native
bc swap ld_rr,xx
frombc
next }

\ change compile-time behavior
{: does
xlast
2 +
offset @ +
skipstr
w! }

\ target quotation
{: {
$
vm
' xcompile
'id}~|

\ postponed colon definition
{: {::
word xfind
3 +
$ swap w!
vm
' xcompile
'id}~|

\ colon definitions
{: {:
native
vm
' xcompile
'id}~|

\ Beginning of cross-compilation
create target
0 org

\ restart
start fl1 jp
8 align

\ begin threading
ex_(sp),hl
vm_l label
c (hl) ld_r,r
hl inc_rr
b (hl) ld_r,r
hl inc_rr
bc push
ret
8 align

\ put data address on stack
bc pop
frombc
next
8 align

\ catch exception
bc pop
catch fl1 jp
8 align

\ pop bc from data stack
ex_de,hl
hl dec_rr
b (hl) ld_r,r
hl dec_rr
c (hl) ld_r,r
ex_de,hl
ret
8 align

\ push bc to data stack
ex_de,hl
(hl) c ld_r,r
hl inc_rr
(hl) b ld_r,r
hl inc_rr
ex_de,hl
ret
8 align

xcreate , ( n -( heap )- )
$ 2 + w,
$ comma !
tobc
hl push
DP ld_hl,(xx)
(hl) c ld_r,r
hl inc_rr
(hl) b ld_r,r
0 label
hl inc_rr
DP ld_(xx),hl
hl pop
next

native c, ( c -( heap )- )
tobc
hl push
DP ld_hl,(xx)
(hl) c ld_r,r
0 lb jr

native @
tobc
ld_a,(bc)
bc inc_rr
ld_(de),a
ld_a,(bc)
0 label
de inc_rr
ld_(de),a
de inc_rr
next

native c@
tobc
ld_a,(bc)
ld_(de),a
xor a
0 lb jr

native c!
de dec_rr
0 label
de dec_rr
ld_a,(de)
ld_(bc),a
next

native !
tobc
de dec_rr
bc inc_rr
ld_a,(de)
ld_(bc),a
bc dec_rr
0 lb jr

native bye ( -( halt )- )
halt

native cpu ( -- )
ex_(sp),hl
ret

native emit ( c -( emit )- )
de dec_rr
de dec_rr
ld_a,(de)
0 out_(x),a
next

native key ( -( key )- c )
0 in_a,(x)
ld_(de),a
de inc_rr
a xor
ld_(de),a
de inc_rr
next

native input
hl push
hl FF00 ld_rr,xx
TIB ld_(xx),hl
0 label
0 in_a,(x)
A cp_x
1 jr_z_f
(hl) a ld_r,r
hl inc_rr
a h ld_r,r
l and_r
a inc_r
0 lb jr_nz
1 rlabel
(hl) 0 ld_r,x
hl pop
next

\ stack manipulation primitives

native drop
de dec_rr
de dec_rr
next

native nip
tobc
de dec_rr
de dec_rr
frombc
next

native swap
tobc
bc push
tobc
bc push
af pop
bc pop
af push
frombc
bc pop
frombc
next

native dup
hl push
hl 2 negate ld_rr,xx
0 label
de add_hl,rr
ldi
ldi
hl pop
next

native over
hl push
hl 4 negate ld_rr,xx
0 lb jr

native third
hl push
hl 6 negate ld_rr,xx
0 lb jr

native >r
tobc
bc push
next

native r>
bc pop
frombc
next

\ failure

xcreate }~fail
0 fl0
fail label
bc FAIL ld_rr,xx
catch flabel
catch label
sp ERR_SP ld_rr,(xx)
hl pop
a and_r
bc sbc_hl,rr
de pop
a (hl) ld_r,r
(hl) e ld_r,r
e a ld_r,r
hl inc_rr
a (hl) ld_r,r
(hl) d ld_r,r
d a ld_r,r
hl pop
ERR_SP ld_(xx),hl
catch lb jr_nz
ex_de,hl
de pop
ex_(sp),hl
ret

native =
tobc
bc push
tobc
ex_(sp),hl
a and_r
bc sbc_hl,rr
hl pop
fail lb jr_nz
1 label
de inc_rr
de inc_rr
next

native <>
tobc
bc push
tobc
ex_(sp),hl
a and_r
bc sbc_hl,rr
hl pop
fail lb jr_z
1 lb jr

native 0=
ex_de,hl
hl dec_rr
a (hl) ld_r,r
hl dec_rr
(hl) or_r
hl inc_rr
hl inc_rr
ex_de,hl
fail lb jr_nz
next

native 0<>
ex_de,hl
hl dec_rr
a (hl) ld_r,r
hl dec_rr
(hl) or_r
hl inc_rr
hl inc_rr
ex_de,hl
fail lb jr_z
next

native carry?
fail lb jr_c
next

native endcomp
0 flabel
$ endcomp !
vm
comma @ w,
fail lb w,

native }
hl pop
next

'endcomp does

native 'id
bc 0 fl1 ld_rr,xx
frombc
0 flabel
next

native execute
tobc
bc push
ret

native &
tobc
de push
exx
ERR_SP ld_hl,(xx)
hl push
FAIL ld_hl,(xx)
hl push
hl FAIL ld_rr,xx
hl push
ERR_SP sp ld_(xx),rr
exx
FAIL bc ld_(xx),rr
bc 6 ld_rr,xx
bc push
1 label
bc 0 fl1 ld_rr,xx
bc push
next
2 label
0 flabel
' cpu w,
hl inc_rr
hl inc_rr
hl push
exx
hl pop
sp add_hl,rr
e (hl) ld_r,r
hl inc_rr
d (hl) ld_r,r
de push
exx
ex_(sp),hl
1 lb jr

native handle
hl push
tobc
bc inc_rr
bc push
tobc
bc push
exx
bc pop
hl pop
a (hl) ld_r,r
(hl) c ld_r,r
c a ld_r,r
hl inc_rr
a (hl) ld_r,r
(hl) b ld_r,r
b a ld_r,r
hl dec_rr
exx
de dec_rr
de dec_rr
de push
de inc_rr
de inc_rr
bc ERR_SP ld_rr,(xx)
bc push
hl push
ERR_SP sp ld_(xx),rr
exx
hl 0 fl1 ld_rr,xx
hl push
tobc
bc push
ret
0 flabel
' cpu w,
hl ERR_SP ld_rr,(xx)
a and_r
sp sbc_hl,rr
0 jr_nz_f
exx
hl pop
de pop
(hl) e ld_r,r
hl inc_rr
(hl) d ld_r,r
hl pop
ERR_SP ld_(xx),hl
de pop
exx
hl pop
next
0 rlabel
sp add_hl,rr
hl inc_rr
hl inc_rr
hl inc_rr
hl inc_rr
c (hl) ld_r,r
hl inc_rr
b (hl) ld_r,r
hl 6 ld_rr,xx
bc add_hl,rr
sp sbc_hl,rr
ex_(sp),hl
hl 1 lb ld_rr,xx
next

\ arithmetic primitives

native +
tobc
bc push
tobc
ex_(sp),hl
bc add_hl,rr
c l ld_r,r
b h ld_r,r
hl pop
frombc
next

native -
tobc
bc push
tobc
bc push
exx
hl pop
bc pop
a and_r
bc sbc_hl,rr
hl push
exx
bc pop
frombc
next

native 1-
tobc
bc dec_rr
frombc
a b ld_r,r
c and_r
1 add_a,x
next

native 1+
tobc
bc inc_rr
frombc
a b ld_r,r
c or_r
1 sub_x
next

native cell+
tobc
bc inc_rr
bc inc_rr
frombc
next

native cell-
tobc
bc dec_rr
bc dec_rr
frombc
next

native cells
tobc
c sla
b rl
frombc
next

\ comparisons

{: >= over swap - carry? drop }

{: <= over - carry? drop }

{: > 1+ carry? >= }

{: < 1- carry? <= }

\ character ranges

\ whitespace
{: ws 20 <= }

\ string functions

{: nonempty dup c@ 0<> drop }

\ heap manipulation

native here
bc DP ld_rr,(xx)
frombc
next

\ self references

{: selfref , dup dup here - c, }

native 'self
c (hl) ld_r,r
b FF ld_r,x
hl push
bc add_hl,rr
c l ld_r,r
b h ld_r,r
hl pop
hl inc_rr
frombc
next

x' selfref does

native }~self
c (hl) ld_r,r
b FF ld_r,x
bc add_hl,rr
ex_(sp),hl
ret

{ selfref }~fail does

postpone word

postpone find

\ tail call

{: endtail
, word find cell+ , }~fail

x' endtail endtail !

native }~
a (hl) ld_r,r
hl inc_rr
h (hl) ld_r,r
l a ld_r,r
ex_(sp),hl
ret

'endtail does

native |
vm
FAIL 1- literal
x' }~ w,
x' handle w,

{: }~| | }~ }

'endcomp does

{: 'id| 'id }~|

{: 'id}~| 'id| }~ }

'endcomp does

{: seedl bye }

start flabel
a A ld_r,x
BASE ld_(xx),a
hl DICTIONARY ld_rr,xx
DP ld_(xx),hl
de STK_BOT ld_rr,xx
sp STK_TOP ld_rr,xx
ix, hl vm_l lb ld_rr,xx
vm
x' seedl w,
x' cpu w,
halt

target dump
